#!/usr/bin/env sh
set -euo pipefail

dotfiles="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"

fail() {
  echo >&2 "$1"
  exit 1
}

currentGeneration() {
  /usr/bin/readlink "${NIX_STATE_DIR:-"/nix/var/nix"}/profiles/per-user/$USER/profile" \
    | awk -F- '{ print $2 }'
}

hostId="$(
  /usr/sbin/ioreg -c IOPlatformExpertDevice -d 2 \
    | awk -F\" '/IOPlatformSerialNumber/{ print $(NF-1) }'
)"

[ -n "$hostId" ] || fail "Unable to determine serial number"

command -v nix-build > /dev/null || fail "Nix not installed"

# Ensure that overlays and `nix.conf` are still found even when not
# symlinked into `~/.config`
export NIX_PATH="nixpkgs-overlays=$dotfiles/overlays.nix"
export NIX_CONF_DIR="$dotfiles"

systemEnv="$(
  nix-build --no-out-link \
    --show-trace \
    -A defaultPackage.x86_64-darwin \
    --argstr hostConfig "$dotfiles/hosts/$hostId/default.nix" \
    --argstr username "$USER" \
    --argstr homeDirectory "$HOME" \
    --argstr dotfilesRoot "$dotfiles" \
    "$dotfiles"
)"

echo "$systemEnv"

VERBOSE=1 "$systemEnv/activate"

previousGeneration="$(currentGeneration)"

echo "Installing packages to Nix profile"
# We need to resolve the symlink to the buildEnv here, otherwise
# Nix will use the $systemEnv buildEnv as the source of the profile
# (meaning we get ~/.nix-profile/env and ~/.nix-profile/activate)
nix-env --set "$(/usr/bin/readlink "$systemEnv/env")" --show-trace

newGeneration="$(currentGeneration)"

if [ "$previousGeneration" = "$newGeneration" ]; then
  echo "==> No change, reusing generation $previousGeneration"
else
  echo "==> Now using profile generation $newGeneration"
fi
