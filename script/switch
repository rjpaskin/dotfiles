#!/bin/bash
set -euo pipefail

dotfiles="$(CDPATH='' cd -- "$(dirname -- "$0")/.." && pwd -P)"

fail() {
  echo >&2 "$1"
  exit 1
}

currentGeneration() {
  /usr/bin/readlink "${NIX_STATE_DIR:-"/nix/var/nix"}/profiles/per-user/$USER/profile" \
    | awk -F- '{ print $2 }'
}

hostId="$(scutil --get LocalHostName | sed -e 's/^rjp-//')"

[ -n "$hostId" ] || fail "Unable to determine hostname"

hasNixBuild=""
hasNixProfile=""

if command -v nix-build > /dev/null; then
  hasNixBuild="1"
fi

if [ -n "${NIX_PROFILES:-}" ]; then
  hasNixProfile="1"
fi

if [ -z "$hasNixBuild" ] || [ -z "$hasNixProfile" ]; then
  nixVersion="$(awk -F\" '/NIX_VERSION=/{print $2}' "$dotfiles/script/bootstrap")"
  [ -n "$nixVersion" ] || fail "Unable to get Nix version"

  nixPath="$(find "${NIX_STORE_DIR:="/nix/store"}" -depth 1 -name "*-nix-$nixVersion" | head -n 1)"
  [ -n "$nixPath" ] || fail "Unable to find Nix derivation in Nix store"

  # shellcheck disable=SC1072,SC1091
  [ -n "$hasNixProfile" ] || source "$nixPath/etc/profile.d/nix.sh"
  [ -n "$hasNixBuild" ] || export PATH="$nixPath/bin:$PATH"
fi

# Ensure that overlays and `nix.conf` are still found even when not
# symlinked into `~/.config`
export NIX_PATH="nixpkgs-overlays=$dotfiles/overlays.nix"
export NIX_CONF_DIR="$dotfiles"

nixSystem="$(
  nix --extra-experimental-features nix-command \
    eval --impure --raw \
    --expr builtins.currentSystem
)"

# Can't use `nix build` here, as flakes don't work with `--arg/--argstr`
systemEnv="$(
  nix-build --no-out-link \
    --show-trace \
    -A "legacyPackages.$nixSystem.dotfiles" \
    --argstr hostConfig "$dotfiles/hosts/$hostId.nix" \
    --argstr username "$USER" \
    --argstr homeDirectory "$HOME" \
    --arg machine "{
      dotfilesDirectory = \"$dotfiles\";
      macOSversion = \"$(sw_vers -productVersion)\";
    }" \
    "$dotfiles"
)"

echo "$systemEnv"

coreutils="$(
  nix-build --no-out-link \
    --show-trace \
    -A "legacyPackages.$nixSystem.nixpkgs.coreutils" \
    "$dotfiles"
)"

VERBOSE=1 PATH="$coreutils/bin:$PATH" "$systemEnv/activate"

previousGeneration="$(currentGeneration)"

echo "Installing packages to Nix profile"
# We need to resolve the symlink to the buildEnv here, otherwise
# Nix will use the $systemEnv buildEnv as the source of the profile
# (meaning we get ~/.nix-profile/env and ~/.nix-profile/activate)
nix-env --set "$(/usr/bin/readlink "$systemEnv/env")" --show-trace

newGeneration="$(currentGeneration)"

if [ "$previousGeneration" = "$newGeneration" ]; then
  echo "==> No change, reusing generation $previousGeneration"
else
  echo "==> Now using profile generation $newGeneration"
fi
