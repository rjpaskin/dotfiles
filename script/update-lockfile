#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path("../spec/support", __dir__)
require "shell_lib"

class NixLockfile
  include ShellLib::ResourceHelpers
  include ShellLib::PathHelpers

  NIX_VERSION_REGEXP = /^(NIX_VERSION=['"])([^'"]+)(['"])/m

  def update(*inputs)
    inputs = inputs.flatten

    Dir.chdir(DOTFILES) do
      diff do
        flake_command = if inputs.any?
          %w[flake lock] + inputs.map {|input| "--update-input #{input}" }
        else
          %w[flake update]
        end

        nix(flake_command.join(" "), capture: false)

        update_bootstrap_nix_version if inputs.empty? || inputs.include?("nixpkgs")
      end
    end
  end

  def update_bootstrap_nix_version
    dotfiles_path("script/bootstrap").editable.edit do |content|
      content.gsub(NIX_VERSION_REGEXP) do
        start_quote, old_version, end_quote = Regexp.last_match.to_a
        puts "Nix: #{old_version} -> #{nix_version}" if old_version != nix_version

        "#{start_quote}#{nix_version}#{end_quote}"
      end
    end
  end

  def commits_for_inputs
    lockfile = ShellLib::StrictHash.parse_json(
      dotfiles_path("flake.lock").contents
    )

    version = lockfile[:version]
    raise "Unhandled version: #{version}" if version != 7

    root_name = lockfile[:root]
    nodes = lockfile[:nodes]

    nodes[root_name, :inputs].each_value.each_with_object({}) do |name, inputs|
      locked = nodes[name, :locked]
      next if locked[:type] != "github"

      inputs[name] = {
        slug: "#{locked[:owner]}/#{locked[:repo]}",
        commit: locked[:rev][0, 7]
      }
    end
  end

  def diff
    locked_before = commits_for_inputs
    yield
    locked_after = commits_for_inputs

    locked_before.each do |name, before|
      after = locked_after.fetch(name, {})

      if before[:slug] != after[:slug]
        puts "Repo changed: #{before[:slug]} -> #{after[:slug]}"
        next
      end

      next if before[:commit] == after[:commit]

      puts "#{name}: https://github.com/#{before[:slug]}/compare/#{before[:commit]}...#{after[:commit]}"
    end
  end

  private

  def nix_version
    @nix_version ||= nix("eval --raw .#nixpkgs.nix.version").chomp
  end

  def nix_flakes_path
    @nix_flakes_path ||= command!(
      "nix-build . -A nixpkgs.nixFlakes --no-out-link"
    ).chomp
  end

  def nix(subargs, capture: true)
    args = [
      "#{nix_flakes_path}/bin/nix",
      "--experimental-features 'nix-command flakes'",
      subargs
    ].join(" ")

    if capture
      command!(args)
    else
      system(args) or raise "failed!"
    end
  end
end

NixLockfile.new.update(ARGV) if $0 == __FILE__
