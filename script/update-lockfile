#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path("../spec/support", __dir__)
require "shell_lib"

class NixLockfile
  include ShellLib::ResourceHelpers
  include ShellLib::PathHelpers

  NIX_VERSION_REGEXP = /^(NIX_VERSION=['"])([^'"]+)(['"])/m

  def update
    Dir.chdir(DOTFILES) do
      nix("flake update", capture: false)
      update_bootstrap_nix_version
    end
  end

  def update_bootstrap_nix_version
    dotfiles_path("script/bootstrap").editable.edit do |content|
      content.gsub(NIX_VERSION_REGEXP) do
        old_version = $2
        puts "Nix: #{old_version} -> #{nix_version}" if old_version != nix_version

        "#{$1}#{nix_version}#{$3}"
      end
    end
  end

  private

  def nix_version
    @nix_version ||= nix("eval --raw .#nixpkgs.nix.version").chomp
  end

  def nix_flakes_path
    @nix_flakes_path ||= command!(
      "nix-build . -A nixpkgs.nixFlakes --no-out-link"
    ).chomp
  end

  def nix(subargs, capture: true)
    args = [
      "#{nix_flakes_path}/bin/nix",
      "--experimental-features 'nix-command flakes'",
      subargs
    ].join(" ")

    if capture
      command!(args)
    else
      system(args) or raise "failed!"
    end
  end
end

NixLockfile.new.update if $0 == __FILE__
