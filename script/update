#!/bin/sh

set -e
[ -n "$DEBUG" ] && set -x

if [ "$1" = "--dry-run" ] || [ "$1" = "-n" ]; then
  dry_run="true"
  printf "Dry run mode\n\n"
  section_format="Checking for updates to %s..."
else
  section_format="Installing updates for %s..."
fi

if [ -t 1 ]; then
  section_format="$(tput setaf 2)$section_format$(tput sgr0)"
fi

script_dir=$(CDPATH='' cd -- "$(dirname -- "$0")" && pwd -P)
formulae_dir="$script_dir"/../Formula

section() {
  # shellcheck disable=SC2059
  printf "$section_format\n" "$1"
}

join_by() {
  local IFS="$1"; shift

  echo "$*"
}

show_repo_updates() {
  local git_dir="$1"

  git -C "$git_dir" fetch --quiet
  diff=$(git -C "$git_dir" --no-pager diff --stat "HEAD..@{u}")

  if [ -z "$diff" ]; then diff="No updates"; fi

  echo "$diff"
}

brew_gem_outdated_file_names() {
  local outdated
  outdated=$(brew outdated --quiet "$formulae_dir"/gem-*.rb)

  for formula in $outdated; do
    echo "$formulae_dir/$formula.rb"
  done
}

# Ensure that Homebrew stuff (e.g. Ruby) is found first
# when updating formulae (e.g. Vim)
export PATH="/usr/local/bin:$PATH"

section "macOS"

if [ -n "$dry_run" ]; then
  softwareupdate --list
else
  softwareupdate --install --all
fi

section "Homebrew formulae"
brew update --force # https://github.com/Homebrew/brew/issues/1151

if [ -n "$dry_run" ]; then
  brew outdated

  section "Homebrew casks"
  brew cask outdated

  section "Mac App Store apps"
  mas outdated

  section "Brew gems"
  brew outdated "$formulae_dir"/gem-*.rb || true
else
  brew upgrade
  brew cleanup # separate step to preserve previous versions if above fails

  section "Homebrew casks"
  # `brew cask upgrade` isn't a thing (yet)
  outdated_casks=$(brew cask outdated --quiet)

  for cask in $outdated_casks; do
    brew cask reinstall "$cask"
  done
  brew cask cleanup

  section "Mac App Store apps"
  mas upgrade

  section "Brew gems"
  outdated=$(brew_gem_outdated_file_names)

  for formula in $outdated; do
    brew upgrade "$formula"
  done
  brew cleanup
fi

if command -v rbenv > /dev/null; then
  section "gems"

  default_gems=( $(grep -vE '^(#|$)' "$(rbenv root)/default-gems") )

  if [ -n "$dry_run" ]; then
    remote_version=$(gem list --remote "^rubygems-update$" | awk '{gsub(/[()]/, ""); print $2}')
    current_version=$(gem -v)

    if [ "$current_version" != "$remote_version" ]; then
      echo "gem ($current_version) < $remote_version"
    else
      echo "No update to gem --system"
    fi

    gem outdated | grep -E "^($(join_by \| "${default_gems[@]}"))" || echo "No updates to default gems"
  else
    rbenv each -v gem update --system
    rbenv each -v gem update "${default_gems[@]}"
  fi
fi

if command -v circleci > /dev/null; then
  section "CircleCI CLI"

  if [ -n "$dry_run" ]; then
    circleci version 2>/dev/null | grep --color=no "newer" || echo "No updates"
  else
    circleci update
  fi
fi

section "Vim plugins"

if [ -n "$dry_run" ]; then
  for plugin_dir in "$HOME/.vim/bundle/"*; do
    if [ -t 1 ]; then
      echo "$(tput setaf 4)$plugin_dir$(tput sgr0)"
    else
      echo "$plugin_dir"
    fi

    show_repo_updates "$plugin_dir"
  done
else
  vim -i NONE -c PlugUpdate -c quitall
fi

section "Oh My Zsh"

if [ -n "$dry_run" ]; then
  show_repo_updates "$HOME/.oh-my-zsh"
else
  # what `upgrade_oh_my_zsh` does
  env ZSH="$HOME/.oh-my-zsh" sh "$HOME/.oh-my-zsh/tools/upgrade.sh"
fi
