{ config, lib, pkgs, ... }:

# Based on https://github.com/LnL7/nix-darwin/blob/007d700/modules/homebrew.nix

with lib;
with types;

let
  inherit (config) roles;
  inherit (config.lib.roles) mkOptionalRole;
  inherit (pkgs) mas;

  toCask = { name, ...}: ''cask "${name}"'';
  toMas = name: id: ''mas "${name}", id: ${toString id}'';

  cfg = config.targets.darwin.homebrew;

  bundleFile = pkgs.writeText "Brewfile" ''
    # Automatically generated by home-manager

    # Casks
    ${concatMapStringsSep "\n" toCask cfg.casks}

    # App Store apps
    ${concatStringsSep "\n" (mapAttrsToList toMas cfg.masApps)}
  '';

  caskWithConfigType = submodule ({ config, ... }: let
    prefToConfig = domain: "Library/Preferences/${domain}.plist";
  in {
    options = {
      name = mkOption {
        description = "Name of cask";
        type = str;
      };

      files = mkOption {
        description = "Files to symlink";
        type = listOf str;
        default = [];
      };

      prefs = mkOption {
        description = "Preference files to symlink, as domains";
        type = listOf str;
        default = [];
      };

      configs = mkOption {
        description = "Collected files to symlink";
        type = listOf str;
        internal = true;
        default = [];
      };

      defaults = mkOption {
        description = "macOS defaults to set";
        type = attrs;
        default = {};
      };
    };

    config = {
      name = mkDefault config.name;
      configs = config.files ++ (map prefToConfig config.prefs);
    };
  });

  extractedConfigs = foldl' (acc: { configs, ... }: acc ++ configs) [] cfg.casks;
  extractedDefaults = mkMerge (catAttrs "defaults" cfg.casks);

in {
  options = {
    roles = {
      cyberduck = mkOptionalRole "Cyberduck";
      dropbox = mkOptionalRole "Dropbox";
      eqmac = mkOptionalRole "eqMac";
      gimp = mkOptionalRole "GIMP";
      harvest = mkOptionalRole "Harvest taskbar app";
      inkscape = mkOptionalRole "Inkscape";
      ngrok = mkOptionalRole "ngrok";
      postman = mkOptionalRole "Postman";
      slack = mkOptionalRole "Slack";
      sql-clients = mkOptionalRole "SQL clients (Sequel Pro, TablePlus)";
      virtualbox = mkOptionalRole "Virtual Box with extensions";
      whatsapp = mkOptionalRole "WhatsApp";
      zoom = mkOptionalRole "Zoom app";
    };

    targets.darwin.homebrew = {
      casks = mkOption {
        description = "Homebrew casks to install";
        type = listOf (coercedTo str (name: { inherit name; }) caskWithConfigType);
      };

      masApps = mkOption {
        description = "Homebrew casks to install";
        type = attrsOf ints.positive;
      };
    };
  };

  config = {
    targets.darwin.homebrew = {
      casks = mkMerge [
        [
          "google-chrome"
          "firefox"

          {
            name = "atom";
            files = [
              "atom/config.cson"
              "atom/init.coffee"
              "atom/keymap.cson"
              "atom/snippets.cson"
              "atom/styles.less"
            ];
            prefs = ["com.github.atom"];
          }
          {
            name = "dash";
            prefs = ["com.kapeli.dash" "com.kapeli.dashdoc"];
            files = ["Library/Application Support/Dash/library.dash"];
          }
          { name = "emacs"; files = ["emacs.d"]; }
          { name = "iterm2"; prefs = ["com.googlecode.iterm2"]; }
          "kdiff3"
          "xquartz"

          # Quicklook plugins
          {
            name = "qlcolorcode"; # syntax highlighting
            defaults."org.n8gray.QLColorCode".pathHL = "${pkgs.highlight}/bin/highlight";
          }
          "qlcommonmark" # markdown files
          "qlstephen" # files without extensions
          "quicklook-json"
          "quicklook-csv"

          { name = "1password"; prefs = ["com.agilebits.onepassword4"]; }
          "betterzip"
          "imageoptim"
          { name = "keepingyouawake"; prefs = ["info.marcel-dierkes.KeepingYouAwake"]; }
          "mollyguard"
          "superduper"
          "vlc"
        ]

        (mkIf roles.cyberduck ["cyberduck"])
        (mkIf roles.dropbox ["dropbox"])
        (mkIf roles.eqmac [{ name = "eqmac"; prefs = ["com.bitgapp.eqMac2"]; }])
        (mkIf roles.gimp ["gimp"])
        (mkIf roles.inkscape ["inkscape"])
        (mkIf roles.ngrok ["ngrok"])
        (mkIf roles.postman ["postman"])
        (mkIf roles.slack ["slack"])
        (mkIf roles.sql-clients ["sequel-pro" "tableplus"])
        (mkIf roles.virtualbox ["virtualbox" "virtualbox-extension-pack"])
        (mkIf roles.whatsapp ["whatsapp"])
        (mkIf roles.zoom ["zoom"])
      ];

      masApps = mkMerge [
        {
          Keynote = 409183694;
          Numbers = 409203825;
          Pages = 409201541;
          "HP Smart" = 1474276998;
        }

        (mkIf roles.harvest { Harvest = 506189836; })
      ];
    };

    targets.darwin.defaults = extractedDefaults;

    programs.zsh.sessionVariables.HOMEBREW_BUNDLE_FILE = "${bundleFile}";

    home = {
      file = config.lib.symlinks.dotfiles extractedConfigs;

      packages = [ mas ]; # make available for general use

      activation.homebrewBundle = lib.hm.dag.entryAfter ["installPackages"] ''
        $VERBOSE_ECHO "Installing Homebrew casks and MAS apps"

        # Ensure that `brew bundle` doesn't try to install `mas` itself
        export PATH="${mas}/bin:$PATH" HOMEBREW_NO_AUTO_UPDATE=1

        $DRY_RUN_CMD brew bundle install \
          $VERBOSE_ARG \
          --no-upgrade \
          --no-lock \
          --file="${bundleFile}"
      '';
    };
  };
}
