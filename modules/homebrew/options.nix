{ config, lib, pkgs, machine, ... }:

# Based on https://github.com/LnL7/nix-darwin/blob/007d700/modules/homebrew.nix

with lib;
with types;

let
  toCask = { name, removeQuarantine, ...}: concatStrings [
    ''cask "${name}"''
    (optionalString removeQuarantine ", args: { no_quarantine: true }")
  ];
  toMas = name: id: ''mas "${name}", id: ${toString id}'';

  cfg = config.targets.darwin.homebrew;

  bundleFile = pkgs.writeText "Brewfile" ''
    # Automatically generated by home-manager

    # Casks
    ${concatMapStringsSep "\n" toCask cfg.casks}

    # App Store apps
    ${concatStringsSep "\n" (mapAttrsToList toMas cfg.masApps)}
  '';

  caskWithConfigType = submodule {
    options = {
      name = mkOption {
        description = "Name of cask";
        type = str;
      };

      privateFiles = mkOption {
        description = "Private files to symlink";
        type = listOf str;
        default = [];
      };

      defaults = mkOption {
        description = "macOS defaults to set";
        type = attrs;
        default = {};
      };

      rev = mkOption {
        description = "Revision at which to checkout the cask. Intended for deleted apps";
        type = nullOr str;
        default = null;
      };

      removeQuarantine = mkOption {
        description = "Remove the `com.apple.quarantine` extended attribute from cask artifacts?";
        type = bool;
        default = false;
      };
    };
  };

  extractedPrivateFiles = foldl' (acc: cask: acc ++ cask.privateFiles) [] cfg.casks;
  extractedDefaults = mkMerge (catAttrs "defaults" cfg.casks);

  # This makes a number of assumptions:
  # 1. That the cask is from `homebrew/cask`
  # 2. That the name of the cask file is the same as the cask name
  checkoutCasks = map ({ name, rev, ... }: optionalString (rev != null) ''
    $VERBOSE_ECHO "Checking out Casks/${name}.rb @ ${rev}"
    ${pkgs.git}/bin/git checkout ${rev} -- Casks/${name}.rb
  '') cfg.casks;

  archPrefix = optionalString machine.isARM "/usr/bin/arch -arm64e";

  homebrewPath = if machine.isARM then "/opt/homebrew" else "/usr/local";

in {
  options.targets.darwin.homebrew = {
    casks = mkOption {
      description = "Homebrew casks to install";
      type = listOf (coercedTo str (name: { inherit name; }) caskWithConfigType);
    };

    masApps = mkOption {
      description = "Homebrew casks to install";
      type = attrsOf ints.positive;
    };
  };

  config = {
    targets.darwin.defaults = extractedDefaults;

    programs.zsh.sessionVariables.HOMEBREW_BUNDLE_FILE = "${bundleFile}";

    home = {
      file = config.lib.symlinks.privateFiles extractedPrivateFiles;

      packages = [ pkgs.mas ]; # make available for general use

      activation.homebrewBundle = lib.hm.dag.entryAfter ["installPackages"] ''
        $VERBOSE_ECHO "Installing Homebrew casks and MAS apps"

        # Ensure that `brew bundle` doesn't try to install `mas` itself
        export PATH="${pkgs.mas}/bin:$PATH" HOMEBREW_NO_AUTO_UPDATE=1

        ${
          optionalString (checkoutCasks != []) ''
            pushd "$(${homebrewPath}/bin/brew --repository homebrew/cask)" > /dev/null
            ${concatStrings checkoutCasks}
            popd
          ''
        }

        ${
          optionalString machine.isARM ''
            if [ -z "''${HOMEBREW_PREFIX:-}" ]; then
              $DRY_RUN_CMD eval "$(/opt/homebrew/bin/brew shellenv)"
            fi
          ''
        }

        $DRY_RUN_CMD ${archPrefix} ${homebrewPath}/bin/brew bundle install \
          $VERBOSE_ARG \
          --no-upgrade \
          --no-lock \
          --file="${bundleFile}"
      '';
    };
  };
}
