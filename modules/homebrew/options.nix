{ config, lib, pkgs, ... }:

# Based on https://github.com/LnL7/nix-darwin/blob/007d700/modules/homebrew.nix

with lib;
with types;

let
  inherit (pkgs) mas;

  toCask = { name, ...}: ''cask "${name}"'';
  toMas = name: id: ''mas "${name}", id: ${toString id}'';

  cfg = config.targets.darwin.homebrew;

  bundleFile = pkgs.writeText "Brewfile" ''
    # Automatically generated by home-manager

    # Casks
    ${concatMapStringsSep "\n" toCask cfg.casks}

    # App Store apps
    ${concatStringsSep "\n" (mapAttrsToList toMas cfg.masApps)}
  '';

  caskWithConfigType = submodule ({ config, ... }: let
    prefToConfig = domain: "Library/Preferences/${domain}.plist";
  in {
    options = {
      name = mkOption {
        description = "Name of cask";
        type = str;
      };

      files = mkOption {
        description = "Files to symlink";
        type = listOf str;
        default = [];
      };

      prefs = mkOption {
        description = "Preference files to symlink, as domains";
        type = listOf str;
        default = [];
      };

      configs = mkOption {
        description = "Collected files to symlink";
        type = listOf str;
        internal = true;
        default = [];
      };

      defaults = mkOption {
        description = "macOS defaults to set";
        type = attrs;
        default = {};
      };
    };

    config = {
      name = mkDefault config.name;
      configs = config.files ++ (map prefToConfig config.prefs);
    };
  });

  extractedConfigs = foldl' (acc: { configs, ... }: acc ++ configs) [] cfg.casks;
  extractedDefaults = mkMerge (catAttrs "defaults" cfg.casks);

in {
  options.targets.darwin.homebrew = {
    casks = mkOption {
      description = "Homebrew casks to install";
      type = listOf (coercedTo str (name: { inherit name; }) caskWithConfigType);
    };

    masApps = mkOption {
      description = "Homebrew casks to install";
      type = attrsOf ints.positive;
    };
  };

  config = {
    targets.darwin.defaults = extractedDefaults;

    programs.zsh.sessionVariables.HOMEBREW_BUNDLE_FILE = "${bundleFile}";

    home = {
      file = config.lib.symlinks.dotfiles extractedConfigs;

      packages = [ mas ]; # make available for general use

      activation.homebrewBundle = lib.hm.dag.entryAfter ["installPackages"] ''
        $VERBOSE_ECHO "Installing Homebrew casks and MAS apps"

        # Ensure that `brew bundle` doesn't try to install `mas` itself
        export PATH="${mas}/bin:$PATH" HOMEBREW_NO_AUTO_UPDATE=1

        $DRY_RUN_CMD brew bundle install \
          $VERBOSE_ARG \
          --no-upgrade \
          --no-lock \
          --file="${bundleFile}"
      '';
    };
  };
}
