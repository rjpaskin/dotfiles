set nocompatible

" -------------------------------------------------
"  Leader and shortcuts
" -------------------------------------------------
let g:mapleader = "\<space>"
nnoremap <silent><leader>q :quit<cr>
nnoremap <silent><leader>w :write<cr>

" zoom current window
nnoremap <silent><leader>z :wincmd _<cr>:wincmd \|<cr>

inoremap jj <esc>
inoremap jk <esc>

" change to single quotes
nnoremap <leader>' :call PreserveWindowState("normal cs\"'")<CR>
" change to double quotes
nnoremap <leader>" :call PreserveWindowState("normal cs'\"")<CR>

function! PreserveWindowState(command)
  let w = winsaveview()
  execute a:command
  call winrestview(w)
endfunction

" Format entire file
nmap <leader>= :call PreserveWindowState("normal gg=G")<CR>

" Common typos
command! W w
command! Wq wq
command! WQ wq

" Aliases
cnoreabbrev ag grep

" -------------------------------------------------
"  Plugins
" -------------------------------------------------
call plug#begin('~/.vim/bundle')

" Sensible defaults
Plug 'tpope/vim-sensible'

" Add commenting
Plug 'tpope/vim-commentary'
" Add 'surround' motion
Plug 'tpope/vim-surround'
" Enable `.` for additional commands
Plug 'tpope/vim-repeat'
" Paired commands with ']' and `[`
Plug 'tpope/vim-unimpaired'
" Asynchronously execute processes
Plug 'tpope/vim-dispatch'

" Navigate between vim and tmux splits
Plug 'christoomey/vim-tmux-navigator'

" Custom text objects
Plug 'kana/vim-textobj-user'
" `(i|a)r` for Ruby blocks
Plug 'nelstrom/vim-textobj-rubyblock'
" `(i|a)v` for underscored/camel-cased parts of words
Plug 'Julian/vim-textobj-variable-segment'

" https://github.com/adriaanzon/vim-textobj-matchit " more generic version of vim-textobj-rubyblock
" https://github.com/tek/vim-textobj-ruby " can include blank after block

" Autocomplete
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } " installation requires CMake

" Configurable status bar
Plug 'vim-airline/vim-airline'

" Automatically add `end` to Ruby blocks
Plug 'tpope/vim-endwise'
" Refactorings for Ruby
Plug 'ecomba/vim-ruby-refactoring'
" Split/join lines of code
Plug 'AndrewRadev/splitjoin.vim'
" Convert to Ruby 1.9 hash syntax, or between string/symbol keys
Plug 'rorymckinley/vim-rubyhash'

" Project navigation
Plug 'Shougo/denite.nvim'
" MRU files plugin for Denite
Plug 'Shougo/neomru.vim'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

Plug 'editorconfig/editorconfig-vim'

" Rails
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'thoughtbot/vim-rspec'

" Javascript
Plug 'pangloss/vim-Javascript'
Plug 'mxw/vim-jsx'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
"
Plug 'w0rp/ale'
Plug 'mattn/emmet-vim'

" Bash
Plug 'markcornick/vim-bats'

" Applescript
Plug 'dearrrfish/vim-applescript'

" Clojure
Plug 'tpope/vim-salve'
Plug 'tpope/vim-fireplace'

" Colour scheme
Plug 'rakr/vim-one'

call plug#end()

" -------------------------------------------------
"  Core Settings
" -------------------------------------------------
set encoding=utf-8           " use UTF-8 encoding
set number                   " show line numbers
set relativenumber           " relative line numbers
set expandtab                " use spaces when <Tab> pressed
set shiftwidth=2             " number of spaces used by (auto)indent
set softtabstop=2            " how wide <Tab> is
set nobackup                 " disable backups
set nowritebackup            " disable backups
"set noswapfile              " disable swapfiles
set directory=~/.vim/swap    " location of swapfiles
set shortmess+=I             " suppress intro message
set splitright               " open vertical splits to the right
set splitbelow               " open horizontal splits below
set gdefault                 " replace all occurences on line without `g` flag, not just first one
set shell=/usr/local/bin/zsh
set colorcolumn=             " disable coloured line at 80 chars
set showmatch                " show matching parentheses
set textwidth=0              " disable wrapping of text in insert mode

if has("termguicolors")
  set termguicolors

  if exists('$TMUX')
    " Enable 24-bit ("true") colours
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  endif
endif

" -------------------------------------------------
" Colour scheme
" -------------------------------------------------
set background=light
colorscheme one
let g:airline_theme="one"

" https://stackoverflow.com/questions/1467438/find-out-to-which-highlight-group-a-particular-keyword-symbol-belongs-in-vim
call one#highlight('Normal',      '', 'ffffff', '')
call one#highlight('ColorColumn', '', 'ffffff', '')

" -------------------------------------------------
" Denite
" -------------------------------------------------
nnoremap <silent><leader>uu               :Denite -buffer-name=file_rec
      \ file_rec<cr>
nnoremap <silent><leader>um               :Denite -buffer-name=models
      \ -path=`getcwd()`/app/models
      \ file_rec<cr>
nnoremap <silent><leader>uc               :Denite -buffer-name=controllers
      \ -path=`getcwd()`/app/controllers
      \ file_rec<cr>
nnoremap <silent><leader>uv               :Denite -buffer-name=views
      \ -path=`getcwd()`/app/views
      \ file_rec<cr>
nnoremap <silent><leader>uh               :Denite -buffer-name=helpers
      \ -path=`getcwd()`/app/helpers
      \ file_rec<cr>
nnoremap <silent><leader>uj               :Denite -buffer-name=javascripts
      \ -path=`getcwd()`/app/assets/javascripts
      \ file_rec<cr>
nnoremap <silent><leader>us               :Denite -buffer-name=specs
      \ -path=`getcwd()`/spec
      \ file_rec<cr>
nnoremap <silent><leader>ub               :Denite -buffer-name=buffers
      \ buffer<cr>

nnoremap <silent><leader>uf :Denite -buffer-name=file_mru file_mru<cr>
nnoremap <silent><leader>ul :Denite -buffer-name=line     line<cr>
nnoremap <silent><leader>uo :Denite -buffer-name=outline  outline<cr>

call denite#custom#option('_', {
      \ 'highlight_matched_char': 'DiffDelete',
      \ 'highlight_matched_range': 'Statement',
      \ 'highlight_mode_insert': 'DiffAdd',
      \ 'highlight_mode_normal': 'DiffText',
      \ })

call denite#custom#var('file_rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

" ------------------------------------------------
" The Silver Searcher
" ------------------------------------------------
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" ------------------------------------------------
" NERDtree
" ------------------------------------------------
map <Leader>n <plug>NERDTreeTabsToggle<CR>
map <Leader>nf :NERDTreeFind<CR>

" ------------------------------------------------
" EditorConfig
" ------------------------------------------------
" Prevent editorconfig interfering with fugitive
let g:EditorConfig_exclude_patterns = ["fugitive://.*"]

" Don't wrap over-long lines
let g:EditorConfig_disable_rules = ["max_line_length"]

" ------------------------------------------------
" SplitJoin
" ------------------------------------------------
" Don't indent multi-line args in line with opening `(`
let g:splitjoin_ruby_hanging_args = 0
" Don't use `{}` when joining/spliting hashes as last argument
let g:splitjoin_ruby_curly_braces = 0

" ------------------------------------------------
" RSpec.vim
" ------------------------------------------------
let g:rspec_command = "compiler rspec | Dispatch bin/rspec {spec}"

map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" From https://github.com/jferris/dotfiles/blob/master/vimrc.local
function! DockerSetup()
  if filereadable("docker-compose.yml")
    let g:rspec_command = "Dispatch docker-compose exec app bin/rspec {spec}"
    let g:dispatch_compilers["docker-compose exec app"] = "rspec"
  endif
endfunction

" Use `FileType ruby`?
autocmd BufNewFile,BufRead * :call DockerSetup()

" ------------------------------------------------
" vim-jsx
" ------------------------------------------------
let g:jsx_ext_required = 0

" ------------------------------------------------
" vim-prettier
" ------------------------------------------------
scriptencoding utf-32 " for vim-lint

let g:prettier#autoformat = 0
let g:prettier#exec_cmd_async = 1
" Don't format code on save
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql PrettierAsync

" max line length that prettier will wrap on
let g:prettier#config#print_width = 80
" number of spaces per indentation level
let g:prettier#config#tab_width = 4
" single quotes over double quotes
let g:prettier#config#single_quote = 'true'
" print spaces between brackets
let g:prettier#config#bracket_spacing = 'true'
" none|es5|all
let g:prettier#config#trailing_comma = 'none'
" flow|babylon|typescript|postcss|json|graphql
let g:prettier#config#parser = 'flow'

" ------------------------------------------------
" ALE
" ------------------------------------------------
let g:ale_linters = {
      \   'Dockerfile': ['hadolint'],
      \   'haml': ['haml_lint'],
      \   'javascript': ['eslint', 'flow'],
      \   'jsx': ['eslint', 'flow'],
      \   'ruby': ['rubocop'],
      \   'vim': ['vint'],
      \   'yaml': ['yamllint'],
      \ }

let g:ale_fixers = {
      \   'ruby': ['rubocop'],
      \ }

nnoremap <silent><C-n> :ALENext<cr>
nnoremap <silent><C-p> :ALEPrevious<cr>
nnoremap <silent><localleader>f   :ALEFix<cr>

let g:ale_sign_column_always = 1
let g:ale_sign_error = '••'
let g:ale_sign_warning = '••'

highlight link ALEErrorSign DiffDelete
highlight link ALEError DiffDelete

highlight link ALEWarningSign Todo
highlight link ALEWarning Todo

let g:ale_echo_msg_format = '%linter%: %s'

let g:ale_sh_shellcheck_exclusions = 'SC2039' " comma-separated -list

" ------------------------------------------------
" emmet-vim
" ------------------------------------------------
let g:user_emmet_leader_key='<c-e>'

let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}
