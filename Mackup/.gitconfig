[core]
  quotepath = false
  autocrlf = input
	excludesfile = ~/.gitignore_global
  attributesFile = ~/.gitattributes
	editor = vim
[color]
  ui = true
	diff = auto
	status = auto
	branch = auto
[alias]
	stash-rename = "!_() { \
			rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; \
			git diff-index --quiet HEAD; s=$?; \
			[ $s != 0 ] && git stash save \"tmp stash from stash-rename\"; \
			git stash apply $rev && shift && git stash save \"$@\" && [ $s != 0 ] && git stash pop stash@{1}; \
		}; \
		_"
	co = "!f() { \
		git show-ref |\
		sed \"s/.* refs\\///\" |\
		sed \"s/heads\\///\" |\
		fzf-tmux |\
		sed \"s/remotes\\/origin\\///\" |\
		sed \"s/tags\\///\"; \
	}; \
	git checkout $(f)"
  branches = for-each-ref --sort=-committerdate --format=\"%(color:yellow)%(authordate:relative)\t%(color:blue)%(authorname)\t%(color:red)%(color:bold)%(refname:short)\" refs/remotes
  fetch-base-branches= "!git fetch origin $(git branch --list --format '%(refname:short):%(refname:short)' | grep -v '/')"
  local-branches = !git branch -vv | cut -c 3- | awk '$3 !~/\\[/ { print $1 }'
  oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
  grep-branch        = "!f(){ git branch -a | sed -e 's/[ \\*]*//' | grep -v -e '\\->' | xargs git grep $@; };f "
  grep-branch-remote = "!f(){ git branch -a | sed -e 's/[ \\*]*//' | grep -v -e '\\->' | grep '^remotes' | xargs git grep $@; };f"
  grep-branch-local  = "!f(){ git branch -a | sed -e 's/[ \\*]*//' | grep -v -e '\\->' -e '^remotes' | xargs git grep $@;  };f "
  checkout-at = "!f() { rev=$(git rev-list -1 --before=\"$1\" ${2:-master}) && git checkout \"$rev\"; }; f"
  rename-branch = "!f() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; f"
  # Recreate branch on top of master
  recreate-branch = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\"; }; f"
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
# From https://gist.github.com/strax/c0dcbfa2f9bb54f95787
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.version: (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.version: (\\d+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(version: #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"
[include]
  path = ~/.gitconfig.local
